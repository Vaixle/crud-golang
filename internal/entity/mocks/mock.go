// Code generated by MockGen. DO NOT EDIT.
// Source: todo.go

// Package mock_entity is a generated GoMock package.
package mock_entity

import (
	entity "github.com/Vaixle/crud-golang/internal/entity"
	httpquery "github.com/Vaixle/crud-golang/pkg/httpquery"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTodoRepository is a mock of TodoRepository interface.
type MockTodoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTodoRepositoryMockRecorder
}

// MockTodoRepositoryMockRecorder is the mock recorder for MockTodoRepository.
type MockTodoRepositoryMockRecorder struct {
	mock *MockTodoRepository
}

// NewMockTodoRepository creates a new mock instance.
func NewMockTodoRepository(ctrl *gomock.Controller) *MockTodoRepository {
	mock := &MockTodoRepository{ctrl: ctrl}
	mock.recorder = &MockTodoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoRepository) EXPECT() *MockTodoRepositoryMockRecorder {
	return m.recorder
}

// GetTaskById mocks base method.
func (m *MockTodoRepository) GetTaskById(id uint) (*entity.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskById", id)
	ret0, _ := ret[0].(*entity.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskById indicates an expected call of GetTaskById.
func (mr *MockTodoRepositoryMockRecorder) GetTaskById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskById", reflect.TypeOf((*MockTodoRepository)(nil).GetTaskById), id)
}

// GetTasks mocks base method.
func (m *MockTodoRepository) GetTasks(filters []httpquery.FilterOption, pagination httpquery.Pagination) ([]entity.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasks", filters, pagination)
	ret0, _ := ret[0].([]entity.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasks indicates an expected call of GetTasks.
func (mr *MockTodoRepositoryMockRecorder) GetTasks(filters, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasks", reflect.TypeOf((*MockTodoRepository)(nil).GetTasks), filters, pagination)
}

// SaveTask mocks base method.
func (m *MockTodoRepository) SaveTask(task *entity.Todo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTask", task)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTask indicates an expected call of SaveTask.
func (mr *MockTodoRepositoryMockRecorder) SaveTask(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTask", reflect.TypeOf((*MockTodoRepository)(nil).SaveTask), task)
}

// MockTodoUseCase is a mock of TodoUseCase interface.
type MockTodoUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockTodoUseCaseMockRecorder
}

// MockTodoUseCaseMockRecorder is the mock recorder for MockTodoUseCase.
type MockTodoUseCaseMockRecorder struct {
	mock *MockTodoUseCase
}

// NewMockTodoUseCase creates a new mock instance.
func NewMockTodoUseCase(ctrl *gomock.Controller) *MockTodoUseCase {
	mock := &MockTodoUseCase{ctrl: ctrl}
	mock.recorder = &MockTodoUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoUseCase) EXPECT() *MockTodoUseCaseMockRecorder {
	return m.recorder
}

// GetTaskById mocks base method.
func (m *MockTodoUseCase) GetTaskById(id uint) (*entity.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskById", id)
	ret0, _ := ret[0].(*entity.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskById indicates an expected call of GetTaskById.
func (mr *MockTodoUseCaseMockRecorder) GetTaskById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskById", reflect.TypeOf((*MockTodoUseCase)(nil).GetTaskById), id)
}

// GetTasks mocks base method.
func (m *MockTodoUseCase) GetTasks(filters []httpquery.FilterOption, pagination httpquery.Pagination) ([]entity.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasks", filters, pagination)
	ret0, _ := ret[0].([]entity.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasks indicates an expected call of GetTasks.
func (mr *MockTodoUseCaseMockRecorder) GetTasks(filters, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasks", reflect.TypeOf((*MockTodoUseCase)(nil).GetTasks), filters, pagination)
}

// SaveTask mocks base method.
func (m *MockTodoUseCase) SaveTask(task *entity.Todo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTask", task)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTask indicates an expected call of SaveTask.
func (mr *MockTodoUseCaseMockRecorder) SaveTask(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTask", reflect.TypeOf((*MockTodoUseCase)(nil).SaveTask), task)
}
